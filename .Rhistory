#Basic sunfish model
#Set parameters and state variable values
r=0.5
N=1:150
K=100
library(ggplot2)#load package
#plot quantities of interest for N graph
r <- 0.5 #set parameter as variable
K <- 100 #set parameter as variable
times <- 1:50 #Pick how long we will run for
#Make a for loop for this iterative process!
output <- matrix(data=NA,nrow=length(times)*3,ncol=2) #pre-allocate
#Make a for loop for this iterative process!
output <- matrix(data=NA,nrow=length(times)*3,ncol=2) #pre-allocate
output[,1] <- times #put the times in
output[1,2] <- 2
#make code for equation
for (i in times[-1]){
output[i,2] <- output[i-1,2]+(r*output[(i-1),2]*(1-output[i-1,2]/K))
}
#plot results
plot(output[,1],output[,2])
#do it in ggplot! :0
outputDF <- data.frame(time=output[,1], pop=output[,2]) #make a DF for ggplot2
head(outputDF)
library(ggplot2)#load package
ggplot(data=outputDF, aes(x=time,y=pop))+
geom_point(color="pink")+
geom_line(color="black")+
theme_classic()
##Challenge2##
r <- 0.5 #set parameter as variable
K <- 100 #set parameter as variable
times <- 1:250 #Pick how long we will run for
challenge2output <- matrix(data=NA,nrow=length(times),ncol=2)
challenge2outputDF <- data.frame(challenge2output)
View(challenge2output)
View(challenge2outputDF)
N0 <- 2
for (i in times[-1]){
if (i!=50){
challenge2outputDF[i,2] <- challenge2outputDF[i-1,2]+(r*challenge2outputDF[(i-1),2]*(1-challenge2outputDF[i-1,2]/K))
}
else{
challenge2outputDF[i,2] <- (challenge2outputDF[i-1,2]+(r*challenge2outputDF[(i-1),2]*(1-challenge2outputDF[i-1,2]/K)))+50
}
}
plot(challenge2output[,1],challenge2outputDF[,2])
View(outputDF)
View(challenge2outputDF)
for (i in times[-1]){
if (i!=50){
challenge2outputDF[i,2] <- challenge2outputDF[i-1,2]+(r*challenge2outputDF[(i-1),2]*(1-challenge2outputDF[i-1,2]/K))
}
else{
challenge2outputDF[i,2] <- (challenge2outputDF[i-1,2]+(r*challenge2outputDF[(i-1),2]*(1-challenge2outputDF[i-1,2]/K)))+50
}
}
View(challenge2outputDF)
for (i in times[-1]){
if (i!=50){
challenge2output[i,2] <- challenge2output[i-1,2]+(r*challenge2output[(i-1),2]*(1-challenge2output[i-1,2]/K))
}
else{
challenge2output[i,2] <- (challenge2output[i-1,2]+(r*challenge2output[(i-1),2]*(1-challenge2output[i-1,2]/K)))+50
}
}
View(challenge2output)
##Challenge2## NOT DONE :(
r <- 0.5 #set parameter as variable
K <- 100 #set parameter as variable
times <- 1:250 #Pick how long we will run for
N0 <- 2
challenge2output[1,2]=N0
View(challenge2output)
challenge2output[,1]=times
View(challenge2output)
for (i in times[-1]){
if (i!=50){
challenge2output[i,2] <- challenge2output[i-1,2]+(r*challenge2output[(i-1),2]*(1-challenge2output[i-1,2]/K))
}
else{
challenge2output[i,2] <- (challenge2output[i-1,2]+(r*challenge2output[(i-1),2]*(1-challenge2output[i-1,2]/K)))+50
}
}
plot(challenge2output[,1],challenge2outputDF[,2])
View(challenge2output)
plot(challenge2output[,1],challenge2output[,2])
##Challenge 3##
r <- 0.5 #set parameter as variable
K <- 100 #set parameter as variable
times <- 1:500 #Pick how long we will run for
N0 <- 2
challenge3output <- matrix(data=NA,nrow=length(times),ncol=2)
challenge3output[1,2]=N0
challenge3output[,1]=times
challenge3outputDF <- data.frame(challenge2output)
for (i in times[-1]){
if (i!=250){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))
}
else{
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))*.1
}
}
plot(challenge2output[,1],challenge2output[,2])
plot(challenge3output[,1],challenge3output[,2])
challenge3outputDF <- data.frame(challenge2output)
View(challenge3outputDF)
ggpplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
library(ggplot2)#load package
ggpplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
ggplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
challenge3outputDF <- data.frame(challenge3output)
ggplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
for (i in times[-1]){
if (i!=250){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))
}
else if(i=50){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))+50
}
else{
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))*.1
}
}
for (i in times[-1]){
if (i!=250){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))
}
else if(i==50){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))+50
}
else{
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))*.1
}
}
challenge3outputDF <- data.frame(challenge3output)
ggplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
##Challenge 3##
r <- 0.5 #set parameter as variable
K <- 100 #set parameter as variable
times <- 1:500 #Pick how long we will run for
N0 <- 2
challenge3output <- matrix(data=NA,nrow=length(times),ncol=2)
challenge3output[1,2]=N0
challenge3output[,1]=times
for (i in times[-1]){
if (i!=250){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))
}
else if(i==50){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))+50
}
else{
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))*.1
}
}
challenge3outputDF <- data.frame(challenge3output)
ggplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))
for (i in times[-1]){
if (i==250){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))*.1
}
else if(i==50){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))+50
}
else{
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))
}
}
challenge3outputDF <- data.frame(challenge3output)
ggplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
for (i in times[-1]){
if (i==250){
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))*.1
}
else if(i==50){
challenge3output[i,2] <- challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K))+50
}
else{
challenge3output[i,2] <- (challenge3output[i-1,2]+(r*challenge3output[(i-1),2]*(1-challenge3output[i-1,2]/K)))
}
}
challenge3outputDF <- data.frame(challenge3output)
ggplot(challenge3outputDF, aes(x=challenge3outputDF[,1],y=challenge3outputDF[,2]))+
geom_line()+
theme_classic()
setwd("C:/Users/matth/Desktop/Intro_to_Biocomputing/BioComp_Tutorial13")
setwd("C:/Users/matth/Desktop/Intro_to_Biocomputing/BioComp_Tutorial13")
time <- 1:1000
pop <- matrix(data=NA, nrow=length(time),ncol=3)
rn <- .1
rm <- .1
K=1000000
pop <- matrix(data=NA, nrow=length(time),ncol=3)
N0=100
rn0 <- .1
rnt <- -.1
rm0 <- .1
rmt <- .05
time <- 1:1000
rn0 <- .1
rnt <- -.1
rm0 <- .1
rmt <- .05
K=1000000
N0=100
pop <- matrix(data=NA, nrow=length(time),ncol=3)
for (i in time[-1]){
if (i<100){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
pop[i,3] <- pop[i-1,3]+rn0*pop[i-1,3]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
else{
pop[i,2]=4
pop[i,3]=4
}
}
View(pop)
K=1000000
N0=100
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[1,2] <- N0
pop[1,3] <- 0
for (i in time[-1]){
if (i<100){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
pop[i,3] <- pop[i-1,3]+rn0*pop[i-1,3]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
else{
pop[i,2]=4
pop[i,3]=4
}
}
View(pop)
setwd("C:/Users/matth/Desktop/Intro_to_Biocomputing/BioComp_Tutorial13")
time <- 1:10000
rn0 <- .1
rnt <- -.1
rm0 <- .1
rmt <- .05
K=1000000
N0=1
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[1,2] <- N0
pop[1,3] <- 0
for (i in time[-1]){
if (i<100){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
pop[i,3] <- pop[i-1,3]+rn0*pop[i-1,3]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
else{
pop[i,2]=4
pop[i,3]=4
}
}
View(pop)
K=1000000
N0=1
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[1,2] <- N0
pop[1,3] <- 0
View(pop)
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
for (i in time[-1]){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
for (i in time[-1]){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
View(pop)
for (i in length(time)-1){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+rn0*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
pop[i,2] <- i
for (i in 2:length(time)){
pop[i,2] <- i
}
View(pop)
View(pop)
rm)pop
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[1,2] <- N0
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]
}
View(pop)
str(pop)
character(pop)
rm(pop)
rnn <- .1
rnt <- -.1
rmn <- .1
rmt <- .05
K=1000000
No=1
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,1] <- i
pop[i,2] <- pop[i-1,2]+rnn*pop[i-1,2]*((1-(pop[i-1,2]+pop[i-1,3]))/K)
}
for (i in 2:length(time)){
pop[i,2] <- rnn*pop[i-1,2]
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
}
rm(pop)
for (i in 2:10000){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
}
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:10000){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
}
for (i in 2:10000){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
}
pop[i,2] <- rnn*pop[i-1,2]+i
for (i in 2:length(time)){
pop[i,2] <- rnn*pop[i-1,2]+i
}
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
rm(pop)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
}
View(pop)
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- (rnn*pop[i-1,2])*(1-((pop[i-1,2]+pop[i-1,3]))/K)
}
View(pop)
for (i in 2:length(time)){
pop[i,2] <- (1-((pop[i-1,2]+pop[i-1,3]))/K)
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- (pop[i-1,2]+pop[i-1,3])
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- (pop[i-1,2])
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- (pop[i-1,2]+pop[i-1,3])
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- (pop[i-1,2]+pop[i-1,3])
pop[i,2] <- 0
}
source('C:/Users/matth/Desktop/Intro_to_Biocomputing/BioComp_Tutorial13/Tut13Answers.R', echo=TRUE)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- (pop[i-1,2]+pop[i-1,3])
pop[i,3] <- 0
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2]*(1-(pop[i-1,2]+pop[i-1,3])/K))
pop[i,3] <- 0
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
if(pop[i,2]<100){pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2]*(1-(pop[i-1,2]+pop[i-1,3])/K))
pop[i,3] <- 0
}
else{
pop[i,3]=109
}
}
for (i in 2:length(time)){
if(i<100){pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2]*(1-(pop[i-1,2]+pop[i-1,3])/K))
pop[i,3] <- 0
}
else{
pop[i,3]=109
}
}
rm(pop)
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 0
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2]*(1-(pop[i-1,2]+pop[i-1,3])/K))
pop[i,3] <- 0
}
rm(pop)
K=1000000
No=99
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 1
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2]*(1-(pop[i-1,2]+pop[i-1,3])/K))
}
rm(pop)
rmt <- .05
K=1000000
No=99
pop <- matrix(data=NA, nrow=length(time),ncol=3)
pop[,1] <- 1:length(time)
pop[1,2] <- No
pop[1,3] <- 1
for (i in 2:length(time)){
pop[i,2] <- pop[i-1,2]+(rnn*pop[i-1,2]*(1-(pop[i-1,2]+pop[i-1,3])/K))
pop[i,3] <- pop[i-1,3]+(rnn*pop[i-1,3]*(1-(pop[i-1,2]+pop[i-1,3])/K))
}
